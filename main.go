package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
	
)

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database
var db *gorm.DB

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î OAuth2 Config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google
var googleOauthConfig = &oauth2.Config{
	ClientID:     "",
	ClientSecret: "",
	RedirectURL:  "http://localhost:3000",
	Scopes:       []string{"https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile"},
	Endpoint:     google.Endpoint,
}

// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Model
type Restroom struct {
	RestroomId            uint   `json:"restroom_id" gorm:"primaryKey;autoIncrement"`
	BuildingName          string `json:"building_name" gorm:"not null"`
	Floor                 int    `json:"floor" gorm:"not null"`
	IsMen                 bool   `json:"is_men" gorm:"not null"`
	IsWomen               bool   `json:"is_women" gorm:"not null"`
	IsAccessible          bool   `json:"is_accessible" gorm:"not null"`
	IsBumGun              bool   `json:"is_bum_gun" gorm:"not null"`
	IsToiletPaper         bool   `json:"is_toilet_paper" gorm:"not null"`
	IsFree                bool   `json:"is_free" gorm:"not null"`
	Latitude              string `json:"latitude" gorm:"not null"`
	Longitude             string `json:"longitude" gorm:"not null"`
	FacultyName           string `json:"faculty_name"`
	OpeningHoursMonday    string `json:"opening_hours_monday"`
	OpeningHoursTuesday   string `json:"opening_hours_tuesday"`
	OpeningHoursWednesday string `json:"opening_hours_wednesday"`
	OpeningHoursThursday  string `json:"opening_hours_thursday"`
	OpeningHoursFriday    string `json:"opening_hours_friday"`
	OpeningHoursSaturday  string `json:"opening_hours_saturday"`
	OpeningHoursSunday    string `json:"opening_hours_sunday"`
}

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Review
type Review struct {
	ReviewID   uint      `json:"review_id" gorm:"primaryKey;autoIncrement"`
	RestroomID uint      `json:"restroom_id" gorm:"not null"`
	UserID     uint      `json:"user_id" gorm:"not null"`
	Rating     float64   `json:"rating" gorm:"not null"`
	Comment    string    `json:"comment"`
	ReviewDate time.Time `json:"review_date" gorm:"type:date;default:CURRENT_DATE"` // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
}

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Photo ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ base64 ‡πÄ‡∏õ‡πá‡∏ô text
type Photo struct {
	PhotoID       uint   `json:"photo_id" gorm:"primaryKey;autoIncrement"`
	Base64        string `json:"base64" gorm:"type:text;not null"` // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô type:text
	PhotoRestroom *uint  `json:"photo_restroom" gorm:"default:null"`
	PhotoReview   *uint  `json:"photo_review" gorm:"default:null"`
}

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á User
type User struct {
	UserId    uint   `json:"user_id" gorm:"primaryKey;autoIncrement"`
	FirstName string `json:"first_name" gorm:"not null"`
	LastName  string `json:"last_name" gorm:"not null"`
	Email     string `json:"email" gorm:"unique;not null"`
	Role      string `json:"role" gorm:"not null;default:'user'"`
}

type ReviewBase64Request struct {
	RestroomID  string `json:"restroom_id"`
	UserID      string `json:"user_id"`
	Rating      string `json:"rating"`
	Comment     string `json:"comment"`
	PhotoBase64 string `json:"photo_base64"`
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Database
func initDatabase() {
	var err error
	dsn := "host=postgres user=postgres password=peempleng123 dbname=ku-toilet port=5432 sslmode=disable"
	db, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("‚ùå Failed to connect to database: %v", err)
	}

	// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå base64 ‡πÄ‡∏õ‡πá‡∏ô TEXT (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥)
	db.Exec("ALTER TABLE photos ALTER COLUMN base64 TYPE TEXT;")

	db.AutoMigrate(&Restroom{}, &Review{}, &Photo{}, &User{})
	log.Println("‚úÖ Database connected and migrated!")
}

// ‚úÖ API ‡∏£‡∏±‡∏ö Token ‡∏à‡∏≤‡∏Å Frontend ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Google
func googleAuthHandler(c *fiber.Ctx) error {
	var requestData struct {
		Token string `json:"token"`
	}
	if err := c.BodyParser(&requestData); err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request"})
	}
	tokenInfoURL := "https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=" + requestData.Token
	resp, err := http.Get(tokenInfoURL)
	if err != nil || resp.StatusCode != http.StatusOK {
		return c.Status(http.StatusUnauthorized).JSON(fiber.Map{"error": "Invalid token"})
	}
	var tokenData struct {
		Email      string `json:"email"`
		GivenName  string `json:"given_name"`
		FamilyName string `json:"family_name"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&tokenData); err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to parse token data"})
	}
	var user User
	result := db.Where("email = ?", tokenData.Email).First(&user)
	if result.Error != nil {
		user = User{
			FirstName: tokenData.GivenName,
			LastName:  tokenData.FamilyName,
			Email:     tokenData.Email,
		}
		db.Create(&user)
	}
	return c.JSON(fiber.Map{
		"message": "User authenticated",
		"user":    user,
	})
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô base64
func ConvertToBase64(fileData io.Reader) (string, error) {
	// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	fileBytes, err := io.ReadAll(fileData)
	if err != nil {
		fmt.Println("‚ùå ERROR: ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
		return "", fmt.Errorf("‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %v", err)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î MIME type ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
	mimeType := http.DetectContentType(fileBytes)

	// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
	base64Data := base64.StdEncoding.EncodeToString(fileBytes)
	
	// ‡πÄ‡∏û‡∏¥‡πà‡∏° prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö base64 data URL
	base64URL := fmt.Sprintf("data:%s;base64,%s", mimeType, base64Data)
	
	fmt.Println("‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô base64 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ç‡∏ô‡∏≤‡∏î:", len(base64URL), "bytes)")
	return base64URL, nil
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô CreateReviewWithBase64 ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ base64 ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
func CreateReviewWithBase64(c *fiber.Ctx) error {
	// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• request ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ debug
	body := c.Body()
	fmt.Println("Raw request body:", string(body))

	// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏à‡∏≤‡∏Å request body
	var requestData ReviewBase64Request
	if err := c.BodyParser(&requestData); err != nil {
		fmt.Println("‚ùå ERROR: Failed to parse JSON:", err)
		fmt.Println("Request body:", string(body))
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request data: " + err.Error()})
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
	fmt.Println("üîπ Parsed data - RestroomID:", requestData.RestroomID)
	fmt.Println("üîπ Parsed data - UserID:", requestData.UserID)
	fmt.Println("üîπ Parsed data - Rating:", requestData.Rating)
	fmt.Println("üîπ Parsed data - Comment:", requestData.Comment)
	fmt.Println("üîπ Parsed data - Has Photo:", requestData.PhotoBase64 != "")

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
	restroomID, err := strconv.Atoi(requestData.RestroomID)
	if err != nil {
		fmt.Println("‚ùå ERROR: Invalid restroom ID:", requestData.RestroomID)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid restroom ID"})
	}

	userID, err := strconv.Atoi(requestData.UserID)
	if err != nil {
		fmt.Println("‚ùå ERROR: Invalid user ID:", requestData.UserID)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid user ID"})
	}

	rating, err := strconv.ParseFloat(requestData.Rating, 64)
	if err != nil {
		fmt.Println("‚ùå ERROR: Invalid rating:", requestData.Rating)
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid rating"})
	}

	// ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤)
	now := time.Now()
	currentDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	review := Review{
		RestroomID: uint(restroomID),
		UserID:     uint(userID),
		Rating:     rating,
		Comment:    requestData.Comment,
		ReviewDate: currentDate, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ review_id
	result := db.Create(&review)
	if result.Error != nil {
		fmt.Println("‚ùå ERROR: Failed to insert review into database:", result.Error)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to save review"})
	}

	fmt.Println("‚úÖ Review successfully saved with ID:", review.ReviewID)

	// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö base64 ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
	var photoURL string
	if requestData.PhotoBase64 != "" {
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64
		fmt.Println("üîπ Base64 data length:", len(requestData.PhotoBase64))

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ data: prefix ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		base64Data := requestData.PhotoBase64
		if !strings.Contains(base64Data, "data:") {
			// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ data: prefix ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°
			base64Data = "data:image/jpeg;base64," + base64Data
		}

		// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64 ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
		reviewID := review.ReviewID
		photo := Photo{
			Base64:        base64Data,
			PhotoRestroom: nil,
			PhotoReview:   &reviewID,
		}

		photoResult := db.Create(&photo)
		if photoResult.Error != nil {
			fmt.Println("‚ùå ERROR: Failed to save photo:", photoResult.Error)
			return c.JSON(fiber.Map{
				"message":     "Review added successfully, but image saving failed",
				"review_id":   review.ReviewID,
				"error_image": photoResult.Error.Error(),
			})
		} else {
			photoURL = base64Data
			fmt.Println("‚úÖ Photo saved successfully with ID:", photo.PhotoID, "linked to review:", reviewID)
		}
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
	var restroom Restroom
	db.First(&restroom, restroomID)

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	var user User
	db.First(&user, userID)

	return c.JSON(fiber.Map{
		"message":     "Review added successfully!",
		"review_id":   review.ReviewID,
		"restroom_id": restroomID,
		"user_id":     userID,
		"rating":      rating,
		"comment":     requestData.Comment,
		"name":        restroom.BuildingName,
		"username":    user.FirstName + " " + user.LastName,
		"photo_url":   photoURL,
		"review_date": currentDate.Format("2006-01-02"), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-mm-dd
	})
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô CreateReview ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ base64 ‡πÅ‡∏ó‡∏ô Google Drive
func CreateReview(c *fiber.Ctx) error {
	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å form
	restroomID, err := strconv.Atoi(c.FormValue("restroom_id"))
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid restroom ID"})
	}

	userID, err := strconv.Atoi(c.FormValue("user_id"))
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid user ID"})
	}

	rating, err := strconv.ParseFloat(c.FormValue("rating"), 64)
	if err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid rating"})
	}

	comment := c.FormValue("comment")

	fmt.Println("üîπ Received Data - RestroomID:", restroomID, "UserID:", userID, "Rating:", rating, "Comment:", comment)

	// ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤)
	now := time.Now()
	currentDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	review := Review{
		RestroomID: uint(restroomID),
		UserID:     uint(userID),
		Rating:     rating,
		Comment:    comment,
		ReviewDate: currentDate, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
	}

	result := db.Create(&review)
	if result.Error != nil {
		fmt.Println("‚ùå ERROR: Failed to insert review into database:", result.Error)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to save review"})
	}

	fmt.Println("‚úÖ Review successfully saved! Review ID:", review.ReviewID)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	file, err := c.FormFile("photo")

	var photoURL string

	if err == nil { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
		fileData, err := file.Open()
		if err != nil {
			return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Cannot open file"})
		}
		defer fileData.Close()

		// ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô base64
		base64Data, err := ConvertToBase64(fileData)
		if err != nil {
			return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": "Failed to convert to base64"})
		}

		// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		photo := Photo{
			Base64:        base64Data,
			PhotoRestroom: nil,
			PhotoReview:   &review.ReviewID, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å review_id ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ô‡∏µ‡πâ
		}

		photoResult := db.Create(&photo)
		if photoResult.Error != nil {
			fmt.Println("‚ùå ERROR: Failed to save photo:", photoResult.Error)
		} else {
			photoURL = base64Data
			fmt.Println("‚úÖ Photo saved successfully! Photo ID:", photo.PhotoID)
		}
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
	var restroom Restroom
	db.First(&restroom, restroomID)

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	var user User
	db.First(&user, userID)

	return c.JSON(fiber.Map{
		"message":     "Review added successfully!",
		"review_id":   review.ReviewID,
		"restroom_id": restroomID,
		"user_id":     userID,
		"rating":      rating,
		"comment":     comment,
		"name":        restroom.BuildingName,
		"username":    user.FirstName + " " + user.LastName,
		"photo_url":   photoURL,
		"review_date": currentDate.Format("2006-01-02"), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-mm-dd
	})
}

func getAllReviewsForAdmin(c *fiber.Ctx) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	email := c.Get("X-User-Email", "")
	if email == "" {
		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ header ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å query
		email = c.Query("email", "")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if email != "admkutoilet@gmail.com" {
		return c.Status(http.StatusUnauthorized).JSON(fiber.Map{
			"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ",
		})
	}

	// ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥
	rows, err := db.Raw(`
        SELECT r.review_id, r.restroom_id, r.user_id, r.rating, r.comment, r.review_date, 
               u.first_name, u.last_name, u.email,
               rs.building_name, rs.floor
        FROM reviews r
        JOIN users u ON r.user_id = u.user_id
        JOIN restrooms rs ON r.restroom_id = rs.restroom_id
        ORDER BY r.review_date DESC
    `).Rows()

	if err != nil {
		fmt.Println("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", err)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
		})
	}
	defer rows.Close()

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á slice ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
	var reviews []fiber.Map

	// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
	for rows.Next() {
		var reviewID, restroomID, userID uint
		var rating float64
		var comment, firstName, lastName, email, buildingName string
		var floor int
		var reviewDate time.Time

		if err := rows.Scan(&reviewID, &restroomID, &userID, &rating, &comment, &reviewDate,
			&firstName, &lastName, &email, &buildingName, &floor); err != nil {
			fmt.Println("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", err)
			continue
		}

		// ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
		var photos []Photo
		db.Where("photo_review = ?", reviewID).Find(&photos)

		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡∏á‡πÉ‡∏ô slice
		review := fiber.Map{
			"review_id":     reviewID,
			"restroom_id":   restroomID,
			"user_id":       userID,
			"rating":        rating,
			"comment":       comment,
			"review_date":   reviewDate.Format("2006-01-02"), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-mm-dd
			"first_name":    firstName,
			"last_name":     lastName,
			"email":         email,
			"building_name": buildingName,
			"floor":         floor,
		}

		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
		if len(photos) > 0 {
			review["photo_url"] = photos[0].Base64 // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
		}

		reviews = append(reviews, review)
	}

	return c.JSON(reviews)
}

func deleteReviewForAdmin(c *fiber.Ctx) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	email := c.Get("X-User-Email", "")
	if email == "" {
		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ header ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å query ‡∏´‡∏£‡∏∑‡∏≠ body
		email = c.Query("email", "")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if email != "admkutoilet@gmail.com" {
		return c.Status(http.StatusUnauthorized).JSON(fiber.Map{
			"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
		})
	}

	// ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
	reviewID := c.Params("id")
	if reviewID == "" {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{
			"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
		})
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var review Review
	if err := db.First(&review, reviewID).Error; err != nil {
		return c.Status(http.StatusNotFound).JSON(fiber.Map{
			"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
		})
	}

	// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
	if err := db.Where("photo_review = ?", reviewID).Delete(&Photo{}).Error; err != nil {
		fmt.Println("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", err)
		// ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ
	}

	// ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
	if err := db.Delete(&review).Error; err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
		})
	}

	return c.JSON(fiber.Map{
		"message":   "‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"review_id": review.ReviewID,
	})
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Google Drive ‡πÄ‡∏õ‡πá‡∏ô base64
func migratePhotosToBase64(c *fiber.Ctx) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	email := c.Query("email", "")
	if email != "admkutoilet@gmail.com" {
		return c.Status(http.StatusUnauthorized).JSON(fiber.Map{
			"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
		})
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢
	var count int64
	db.Model(&Photo{}).
		Where("base64 LIKE 'https://drive.google.com%' OR base64 LIKE 'https://lh3.googleusercontent.com%'").
		Count(&count)

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢
	if count == 0 {
		return c.JSON(fiber.Map{
			"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢",
			"count":   0,
		})
	}

	// ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢
	fmt.Printf("üîπ ‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏π‡∏õ\n", count)

	// ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
	return c.JSON(fiber.Map{
		"message": "‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢",
		"count":   count,
		"note":    "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ endpoint /admin/migratePhotos/start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
	})
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
func startMigratePhotosToBase64(c *fiber.Ctx) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	email := c.Query("email", "")
	if email != "admkutoilet@gmail.com" {
		return c.Status(http.StatusUnauthorized).JSON(fiber.Map{
			"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
		})
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á HTTP client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	client := &http.Client{
		Timeout: 30 * time.Second,
	}

	// ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á (batch)
	limit := 10
	limitStr := c.Query("limit", "10")
	limit, _ = strconv.Atoi(limitStr)

	// ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô URL Google Drive
	var photos []Photo
	result := db.Where("base64 LIKE 'https://drive.google.com%' OR base64 LIKE 'https://lh3.googleusercontent.com%'").
		Limit(limit).
		Find(&photos)

	if result.Error != nil {
		fmt.Println("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:", result.Error)
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{
			"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
		})
	}

	if len(photos) == 0 {
		return c.JSON(fiber.Map{
			"message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢",
			"count":   0,
		})
	}

	fmt.Printf("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏ô‡∏ß‡∏ô %d ‡∏£‡∏π‡∏õ\n", len(photos))

	// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
	successCount := 0
	errorCount := 0
	var errors []string

	// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	for i, photo := range photos {
		fmt.Printf("üîπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà %d/%d (ID: %d)\n", i+1, len(photos), photo.PhotoID)

		// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL
		resp, err := client.Get(photo.Base64)
		if err != nil {
			fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ: %v\n", err)
			errorCount++
			errors = append(errors, fmt.Sprintf("ID %d: %v", photo.PhotoID, err))
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
		if resp.StatusCode != http.StatusOK {
			errMsg := fmt.Sprintf("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: HTTP %d", resp.StatusCode)
			fmt.Println("‚ùå", errMsg)
			resp.Body.Close()
			errorCount++
			errors = append(errors, fmt.Sprintf("ID %d: %s", photo.PhotoID, errMsg))
			continue
		}

		// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
		imgData, err := io.ReadAll(resp.Body)
		resp.Body.Close()
		if err != nil {
			fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ: %v\n", err)
			errorCount++
			errors = append(errors, fmt.Sprintf("ID %d: %v", photo.PhotoID, err))
			continue
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
		fileSize := len(imgData)
		contentType := http.DetectContentType(imgData)
		fmt.Printf("üîπ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ: %d bytes, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: %s\n", fileSize, contentType)

		// ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
		if fileSize < 100 || !strings.HasPrefix(contentType, "image/") {
			fmt.Println("‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
			errorCount++
			errors = append(errors, fmt.Sprintf("ID %d: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ", photo.PhotoID))
			continue
		}

		// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
		base64Data := base64.StdEncoding.EncodeToString(imgData)
		base64URL := fmt.Sprintf("data:%s;base64,%s", contentType, base64Data)

		// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		updateResult := db.Model(&Photo{}).Where("photo_id = ?", photo.PhotoID).Update("base64", base64URL)
		if updateResult.Error != nil {
			fmt.Printf("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: %v\n", updateResult.Error)
			errorCount++
			errors = append(errors, fmt.Sprintf("ID %d: %v", photo.PhotoID, updateResult.Error))
			continue
		}

		fmt.Printf("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ID %d\n", photo.PhotoID)
		successCount++

		// ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
		time.Sleep(500 * time.Millisecond)
	}

	// ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
	return c.JSON(fiber.Map{
		"message":        "‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå",
		"total":          len(photos),
		"success_count":  successCount,
		"error_count":    errorCount,
		"errors":         errors,
		"remaining_info": "‡πÉ‡∏ä‡πâ endpoint ‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
	})
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô main
func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	log.SetOutput(os.Stdout)

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	initDatabase()

	app := fiber.New(fiber.Config{
		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î body size ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
		BodyLimit: 10 * 1024 * 1024, // 10MB
		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
		ReadTimeout: 60 * time.Second,
	})

	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ origin
	app.Use(cors.New(cors.Config{
		AllowOrigins:     "*", 
		AllowMethods:     "GET, POST, PUT, DELETE, OPTIONS",
		AllowHeaders:     "Origin, Content-Type, Accept, Authorization, X-User-Email",
		ExposeHeaders:    "Content-Length, Content-Type",
		AllowCredentials: false,
		MaxAge:           86400,
	}))

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á request path ‡πÅ‡∏•‡∏∞ method (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£ debug)
	app.Use(func(c *fiber.Ctx) error {
		fmt.Println("üî∑ Request:", c.Method(), c.Path())
		return c.Next()
	})

	// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
	log.Println("‚úÖ Server starting...")
	fmt.Println("‚úÖ Server starting...")

	// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô routes
	app.Post("/auth/google", googleAuthHandler)

	// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥
	app.Get("/restrooms/details", func(c *fiber.Ctx) error {
		log.Println("üîπ API /restrooms/details ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
		fmt.Println("üîπ API /restrooms/details ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß FMTTTT")

		var restrooms []Restroom
		result := db.Find(&restrooms)
		if result.Error != nil {
			log.Println("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", result.Error)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{
				"error": "Failed to fetch restrooms",
			})
		}

		var restroomWithDetails []fiber.Map

		for _, restroom := range restrooms {
			log.Println("üöΩ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥:", restroom.BuildingName)

			var restroomPhotos []Photo
			db.Where("photo_restroom = ?", restroom.RestroomId).Find(&restroomPhotos)

			var reviews []Review
			db.Where("restroom_id = ?", restroom.RestroomId).Find(&reviews)

			var reviewsWithPhotos []fiber.Map
			for _, review := range reviews {
				log.Println("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:", review.ReviewID, "‡∏Ç‡∏≠‡∏á User ID:", review.UserID)

				var reviewPhotos []Photo
				db.Where("photo_review = ?", review.ReviewID).Find(&reviewPhotos)

				// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ User ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
				var user User
				userQuery := db.Where("user_id = ?", review.UserID).First(&user)

				firstName := "Unknown"
				lastName := "User"
				if userQuery.Error == nil {
					firstName = user.FirstName
					lastName = user.LastName
				} else {
					log.Println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ID:", review.UserID, "| Error:", userQuery.Error)
				}

				fmt.Println("‚úÖ Review ID:", review.ReviewID, "User:", firstName, lastName) // Debugging ‡∏ä‡∏∑‡πà‡∏≠ User

				reviewsWithPhotos = append(reviewsWithPhotos, fiber.Map{
					"review": fiber.Map{
						"review_id":   review.ReviewID,
						"restroom_id": review.RestroomID,
						"user_id":     review.UserID,
						"first_name":  firstName, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
						"last_name":   lastName,  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
						"rating":      review.Rating,
						"comment":     review.Comment,
						"review_date": review.ReviewDate.Format("2006-01-02"), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö yyyy-mm-dd
					},
					"photos": reviewPhotos,
				})
			}

			restroomWithDetails = append(restroomWithDetails, fiber.Map{
				"restroom":        restroom,
				"restroom_photos": restroomPhotos,
				"reviews":         reviewsWithPhotos,
			})
		}

		log.Println("‚úÖ API /restrooms/details ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		return c.JSON(restroomWithDetails)
	})

	// ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
	fmt.Println("üî∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô route POST /review/base64")
	app.Post("/review/base64", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST /review/base64")
		return CreateReviewWithBase64(c)
	})

	fmt.Println("üî∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô route POST /review")
	app.Post("/review", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST /review")
		return CreateReview(c)
	})

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
	app.Get("/health", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{
			"status":    "ok",
			"message":   "Server is running",
			"timestamp": time.Now().Format(time.RFC3339),
		})
	})

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base64
	app.Post("/test-base64", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST /test-base64")
		body := string(c.Body())

		// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô panic
		preview := body
		if len(body) > 100 {
			preview = body[:100] + "..."
		}
		fmt.Println("Body (‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô):", preview)

		return c.JSON(fiber.Map{
			"status":         "ok",
			"message":        "Test base64 endpoint working",
			"received_bytes": len(body),
		})
	})

	fmt.Println("üî∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")

	// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
	app.Get("/admin/reviews", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET /admin/reviews")
		return getAllReviewsForAdmin(c)
	})

	// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
	app.Delete("/admin/reviews/:id", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE /admin/reviews/:id")
		return deleteReviewForAdmin(c)
	})

	// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢
	app.Get("/admin/migratePhotos", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET /admin/migratePhotos")
		return migratePhotosToBase64(c)
	})

	// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	app.Get("/admin/migratePhotos/start", func(c *fiber.Ctx) error {
		fmt.Println("üü¢ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET /admin/migratePhotos/start")
		return startMigratePhotosToBase64(c)
	})

	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 3001
	log.Println("‚úÖ Server listening on port 3001")
	fmt.Println("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï 3001...")
	log.Fatal(app.Listen(":3001"))
}